// Code generated by "validate -type=uint16 -output=%s_generated.go"; DO NOT EDIT

package validate

import "text/template"

type Uint16Validator struct {
	errorMessage string
	params       map[string]interface{}
	validate     func(uint16) bool

	constParams map[string]interface{}
	validators  []func(uint16) error
}

func NewUint16Validator(params map[string]interface{}) *Uint16Validator {
	return &Uint16Validator{constParams: params}
}

func (validator *Uint16Validator) Validate(validate func(uint16) bool) *Uint16Validator {
	validator.validate = validate
	return validator
}

func (validator *Uint16Validator) WithParams(params map[string]interface{}) *Uint16Validator {
	validator.params = params
	return validator
}

func (validator *Uint16Validator) WithErrorMessage(errorMessage string) *Uint16Validator {
	validator.errorMessage = errorMessage
	return validator
}
func (validator *Uint16Validator) Add() *Uint16Validator {
	if validator.validate != nil {
		tmpl := template.Must(template.New("errorMessage").Parse(validator.errorMessage))
		params := make(map[string]interface{})
		for key, value := range validator.constParams {
			params[key] = value
		}
		for key, value := range validator.params {
			params[key] = value
		}
		isValid := validator.validate
		validator.validators = append(validator.validators,
			func(value uint16) error {
				if isValid(value) {
					return nil
				}
				return FormatErrorMessage(tmpl, params, value)
			})
	}
	validator.errorMessage = ""
	validator.params = nil
	return validator
}

func (validator *Uint16Validator) Build() func(uint16) error {
	validator.Add()
	validators := validator.validators
	return func(value uint16) error {
		for _, validate := range validators {
			if err := validate(value); err != nil {
				return err
			}
		}
		return nil
	}
}

func (validator *Uint16Validator) NonZero() *Uint16Validator {
	var zero uint16
	return validator.Add().Validate(func(value uint16) bool { return value != zero }).WithErrorMessage("{.Value} must not be a zero value")
}

func (validator *Uint16Validator) Min(min uint16) *Uint16Validator {
	return validator.Add().Validate(func(value uint16) bool { return value >= min }).
		WithParams(map[string]interface{}{"MinValue": min}).
		WithErrorMessage("{.Value} must be greater than or equal to {.MinValue}")
}

func (validator *Uint16Validator) Max(max uint16) *Uint16Validator {
	return validator.Add().Validate(func(value uint16) bool { return value <= max }).
		WithParams(map[string]interface{}{"MaxValue": max}).
		WithErrorMessage("{.Value} must be less than or equal to {.MaxValue}")
}

func (validator *Uint16Validator) Between(min, max uint16) *Uint16Validator {
	return validator.Add().Validate(func(value uint16) bool { return value >= min && value <= max }).
		WithParams(map[string]interface{}{"MinValue": min, "MaxValue": max}).
		WithErrorMessage("{.Value} must be between {.MinValue} and {.MaxValue}")
}
